GIT
-----Настройки-----

Установить данные для коммитов
git config --global user.email 'alexsey_89@bk.ru'
git config --global user.name 'alexseyU'
Посмотреть настройки git --list

-----Создание-----

git init

Клонирование в каталог , автоматом подключить удаленный реп и установить полную связь
git clone https://github.com/LexusAlex/tasks.git test-site.loc или
git clone git@github.com:devlabuser/sharp.git ./
! клонировать реп можно только в пустую папку

---Локальная работа-----

4 состояния
untracked - неотслеживаемый, просто фаил в папке (белый)
unmodified - фаил неизменился со времен последней фиксации (зеленый) все зафиксированно
modified - фаил уже был в истории, мы его поменяли (желтый)
staged - подготовленный для фиксации изменений фаил под контролем гит (красный)

Добавить в индекс
git add index.php

Удалить из индекса
git reset HEAD откат к последнему коммиту в репозитории
git reset HEAD index.php

Закомиттить
git commit коммит с открыванием редактора
git commit -m 'comment ,refs #12345'

Но прежде нужно забрать измения с сервера
git pull

Потом можно отправлять на сервер в указанную ветку
git push origin master

-----Откаты-----
Изменить коммиты в общей истории нельзя!!!

Откат файла к коммиту
git checkout README.md

Мягкий откат , изменения незафиксированные
git reset --soft

Откат к указанному коммиту
git reset --hard 9a452d955bdb57e7e4f2b09f8ce2fbb6cd56377a

Откат до последней версии удаленной ветки
git reset --hard origin/master

Изменить комментарий к последнему коммиту или добавить что то в коммит
git commit --amend

Удалить коммит последний
git reset --hard HEAD~

Удалить последние 7 коммитов
git reset --hard HEAD~6

Склеивание коммитов последние 7

$ git rebase -i HEAD~6

#  p, pick = Использовать коммит
#  r, reword = Использовать коммит , но редактировать сообщение коммита
#  e, edit = Использовать коммит , но остановить для внесения изменений
#  s, squash = Использовать коммит, но слить комментарии в предыдущий коммит
#  f, fixup = использует "squash", но используется только один комментарий то в который вливатеся

Убрать коммит с удаленного репозитория
Откат к предыдущему коммиту
git reset --hard b81b701
Удалить коммит с удаленного репа
git push -f origin master или git push origin +master

-----Работа с удаленным репозиторием-----

Добавить к текущему реп ссылку на удаленный под именем
Создание связи
git remote add newName https://github.com/LexusAlex/tasks.git test-site.loc

Просмотр удаленных репов
git remote -v Список удаленных репозиторев прикрепленных к нему fetch - откуда сливать push - куда заливать

Информация об удаленном репозитории
git remote show origin

Забрать к себе изменения(но не слить то есть команда не измненяет файлы)
Только информация
git fetch origin

Связать между собой ветки в самом простом случае 2 ветки мастер
git checkout --track test/master создать связь текущая ветка с веткой test/master

Забрать\Отправить изменения
pull/push

-----Ветки-----

В явном виде нет указателя на дочерние коммиты
Можно создать множество веток
Ветка это просто указатель
На один коммит может указывать несколько веток
HEAD Указатель на текущее состояние репозитория
Удобно для выполнения разных задач
Переключаться между ветками в чистом состоянии

--создать ветку и переключится--

Создать ветку
git branch oop

Перейти в ветку
git checkout oop

Создать и перейти в ветку
git checkout -b oop

--слияние--

Слить в ветку master(Перейти в master git checkout master)
git merge oop (fast-forvard) просто перемотка вперед

Но что делать если ветки разошлись
Наилучший общий предок
Сначала git ищет общего предка ориентируется на время
И будет создан коммит слияния обьединив все измнения в двух ветках
recursive strategy Четко по вермени их создания

--решение конфликтов--

Конфликт это штатная ситуация
Решить вручную что делать
Гит предложит вручную исравить разногласия и закоммитить результат

<<<<<< HEAD
то что вливается в новую ветку
======
то что в новой ветке
>>>>>> новая ветка

Из этого нужно оставить что то одно удалив служебную информацию
Нужно сделать коммит git commit решения конфликта

Удаление ветки в удаленном репозитории!!!
git branch -d oop(У себя)
git push origin --delete branch-name(В удаленном репе)

Удалить ветку в любом случае
git branch -D new_branch

Переимновать ветку
git branch -m new_name_branch

Последний коммит в ветке
git branch -v

Создать ветку на удаленном репозитории
git push origin newfeature

Либо сразу отправить свои измения на удаленку и сразу отслеживать
git push -u origin new_f

Слить все коммиты в один
git checkout master
git merge --squash feature
git commit -m 'first + second + third commits'

Примение измений из одной ветки в другую

git checkout feature1
git rebase master
git checkout master
git merge feature1

-----Спрятать измнения-----
Спрятать то над чем работали но не делать коммит чтобы было чистое состояние проекта перед переключением
git stash

Просмотреть что спрятано
git stash list

Вернуть спрятанные измнения
git stash apply

-----Метки-----

Пометить последний коммит меткой - это человекочетаемое имя которое мы даем коммиту
git tag 1.0

Посмотреть все коммиты
git tag

Удалить метку
git tag -d 1.0

Аннонсированная метка
git tag -a 1.0 -m 'message'