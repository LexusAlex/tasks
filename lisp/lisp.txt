(+ 2 10) // 12
(+ 2 2 3 4) //11
(+ (+ 2 2) (* 2 2 ) (- 10 2)) // 16
(+ (* 3 (+ 2 2) (+ 2 2) (* 2 2 ))) // 192

(define s 2); // переменная
(+ s 2) // 4

(define (square x) (* x x)) // функция квадрат
(square 9) // 81

(define (sum-of-squares x y)
    (+ (square x) (square y))
) // функция в составе другой фукнции сумма квадратов
(sum-of-squares 3 4) // 25

(define (f a) // моя функция
(sum-of-squares (+ a 1) (* a 2))
)
(f 5) // 136

// Как это расчитывает интерпретатор , вычислим процесс
// Подстановочная модель
(f 5)
(sum-of-squares (+ a 1) (* a 2))
(sum-of-squares (+ 5 1) (* 5 2))
(sum-of-squares 6 10)
(+ (square 6) (square 10))
(+ (* 6 6) (*10 10))
(+ 36 100)
136

// Добиваемся только примитивных значений и потом вычисляем
(f 5)
(sum-of-squares (+ 5 1) (* 5 2))
(+ (square (+ 5 1)) (square (* 5 2)))
(+ (* (+ 5 1) (+ 5 1)) (* (* 5 2) (* 5 2)))
(+ (* 6 6) (* 10 10))
(+ 36 100)
136

// Упражения
10 // 10
(+ 5 3 4) // 12
(- 9 1) // 8
(/ 6 2) // 3
(+ (* 2 4) (- 4 6)) // + 8 -2 = 6
(define a 3) // ''
(define b (+ a 1)) // ''
(+ a b (* a b)) // (+ 3 4 (* 3 4)) // (+ 7 12) // 19
(= a b) // ''

(if (and (> b a) (< b (* a b)))
b
a) // if (and (> 4 3) (< 4 (* 3 4))) b a) // if(and (true) (true) b a) // 4

(cond ((= a 4) 6) // cond ( false 6)
((= b 4) (+ 6 7 a)) // true 16  // ответ 16
(else 25))

(+ 2 (if (> b a) b a)) // (+ 2 (if (true) 4)) // 6

(* (cond ((> a b) a) (* ( > 3 4)) // условие не выполняется
((< a b) b) // (< 3 4) // 4
(else -1)) // не выполнится
(+ a 1)) // 4
(* 4 4) // 16


(/ (+ 5 4 (- 2 (- 3 ( + 6 (/ 4 5 )))) (* 3 (- 6 2) (- 2 7)) ) //
